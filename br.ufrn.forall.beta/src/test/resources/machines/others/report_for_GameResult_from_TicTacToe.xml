<?xml version="1.0" encoding="UTF-8"?>
<test-suite>
    <machine-name>TicTacToe</machine-name>
    <machine-invariant>
        <invariant-clause>bposn /\ rposn = {}</invariant-clause>
        <invariant-clause>bposn &lt;: 0..8</invariant-clause>
        <invariant-clause>rposn &lt;: 0..8</invariant-clause>
        <invariant-clause>turn : Player</invariant-clause>
    </machine-invariant>
    <operation-under-test>GameResult</operation-under-test>
    <partition-strategy>Equivalence Classes</partition-strategy>
    <combinatorial-criteria>All-Combinations</combinatorial-criteria>
    <oracle-strategy>
        <state-variables>true</state-variables>
        <return-variables>true</return-variables>
        <invariant-ok>true</invariant-ok>
    </oracle-strategy>
    <test-cases>
        <test-case>
            <id>1</id>
            <formula>bposn \/ rposn = 0..8 &amp; ThreeInRow(bposn) = TRUE &amp; bposn /\ rposn = {} &amp; rposn &lt;: 0..8 &amp; ThreeInRow(rposn) = TRUE &amp; turn : Player &amp; bposn &lt;: 0..8</formula>
            <isNegative>false</isNegative>
            <state-variables>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>blue</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>3</value>
                        <value>4</value>
                        <value>5</value>
                        <value>6</value>
                        <value>7</value>
                        <value>8</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>0</value>
                        <value>1</value>
                        <value>2</value>
                    </values>
                </variable>
            </state-variables>
            <operation-parameters/>
            <expected-state-values>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>blue</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>3</value>
                        <value>4</value>
                        <value>5</value>
                        <value>6</value>
                        <value>7</value>
                        <value>8</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>0</value>
                        <value>1</value>
                        <value>2</value>
                    </values>
                </variable>
            </expected-state-values>
            <return-variables>
                <variable>
                    <identifier>result</identifier>
                </variable>
            </return-variables>
        </test-case>
        <test-case>
            <id>2</id>
            <formula>bposn \/ rposn = 0..8 &amp; ThreeInRow(bposn) = TRUE &amp; bposn /\ rposn = {} &amp; rposn &lt;: 0..8 &amp; not(ThreeInRow(rposn) = TRUE) &amp; turn : Player &amp; bposn &lt;: 0..8</formula>
            <isNegative>true</isNegative>
            <state-variables>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>blue</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>0</value>
                        <value>1</value>
                        <value>2</value>
                        <value>3</value>
                        <value>4</value>
                        <value>5</value>
                        <value>6</value>
                        <value>7</value>
                        <value>8</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>{-}</value>
                    </values>
                </variable>
            </state-variables>
            <operation-parameters/>
            <expected-state-values>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
            </expected-state-values>
            <return-variables>
                <variable>
                    <identifier>result</identifier>
                </variable>
            </return-variables>
        </test-case>
        <test-case>
            <id>3</id>
            <formula>bposn \/ rposn = 0..8 &amp; not(ThreeInRow(bposn) = TRUE) &amp; bposn /\ rposn = {} &amp; rposn &lt;: 0..8 &amp; ThreeInRow(rposn) = TRUE &amp; turn : Player &amp; bposn &lt;: 0..8</formula>
            <isNegative>true</isNegative>
            <state-variables>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>blue</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>7</value>
                        <value>8</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>0</value>
                        <value>1</value>
                        <value>2</value>
                        <value>3</value>
                        <value>4</value>
                        <value>5</value>
                        <value>6</value>
                    </values>
                </variable>
            </state-variables>
            <operation-parameters/>
            <expected-state-values>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
            </expected-state-values>
            <return-variables>
                <variable>
                    <identifier>result</identifier>
                </variable>
            </return-variables>
        </test-case>
        <test-case>
            <id>4</id>
            <formula>bposn \/ rposn = 0..8 &amp; not(ThreeInRow(bposn) = TRUE) &amp; bposn /\ rposn = {} &amp; rposn &lt;: 0..8 &amp; not(ThreeInRow(rposn) = TRUE) &amp; turn : Player &amp; bposn &lt;: 0..8</formula>
            <isNegative>true</isNegative>
            <state-variables>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>blue</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>2</value>
                        <value>3</value>
                        <value>7</value>
                        <value>8</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>0</value>
                        <value>1</value>
                        <value>4</value>
                        <value>5</value>
                        <value>6</value>
                    </values>
                </variable>
            </state-variables>
            <operation-parameters/>
            <expected-state-values>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
            </expected-state-values>
            <return-variables>
                <variable>
                    <identifier>result</identifier>
                </variable>
            </return-variables>
        </test-case>
        <test-case>
            <id>5</id>
            <formula>not(bposn \/ rposn = 0..8) &amp; ThreeInRow(bposn) = TRUE &amp; bposn /\ rposn = {} &amp; rposn &lt;: 0..8 &amp; ThreeInRow(rposn) = TRUE &amp; turn : Player &amp; bposn &lt;: 0..8</formula>
            <isNegative>true</isNegative>
            <state-variables>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>blue</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>3</value>
                        <value>4</value>
                        <value>5</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>0</value>
                        <value>1</value>
                        <value>2</value>
                    </values>
                </variable>
            </state-variables>
            <operation-parameters/>
            <expected-state-values>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
            </expected-state-values>
            <return-variables>
                <variable>
                    <identifier>result</identifier>
                </variable>
            </return-variables>
        </test-case>
        <test-case>
            <id>6</id>
            <formula>not(bposn \/ rposn = 0..8) &amp; ThreeInRow(bposn) = TRUE &amp; bposn /\ rposn = {} &amp; rposn &lt;: 0..8 &amp; not(ThreeInRow(rposn) = TRUE) &amp; turn : Player &amp; bposn &lt;: 0..8</formula>
            <isNegative>true</isNegative>
            <state-variables>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>blue</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>0</value>
                        <value>1</value>
                        <value>2</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>{-}</value>
                    </values>
                </variable>
            </state-variables>
            <operation-parameters/>
            <expected-state-values>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
            </expected-state-values>
            <return-variables>
                <variable>
                    <identifier>result</identifier>
                </variable>
            </return-variables>
        </test-case>
        <test-case>
            <id>7</id>
            <formula>not(bposn \/ rposn = 0..8) &amp; not(ThreeInRow(bposn) = TRUE) &amp; bposn /\ rposn = {} &amp; rposn &lt;: 0..8 &amp; ThreeInRow(rposn) = TRUE &amp; turn : Player &amp; bposn &lt;: 0..8</formula>
            <isNegative>true</isNegative>
            <state-variables>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>blue</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>{-}</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>0</value>
                        <value>1</value>
                        <value>2</value>
                    </values>
                </variable>
            </state-variables>
            <operation-parameters/>
            <expected-state-values>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
            </expected-state-values>
            <return-variables>
                <variable>
                    <identifier>result</identifier>
                </variable>
            </return-variables>
        </test-case>
        <test-case>
            <id>8</id>
            <formula>not(bposn \/ rposn = 0..8) &amp; not(ThreeInRow(bposn) = TRUE) &amp; bposn /\ rposn = {} &amp; rposn &lt;: 0..8 &amp; not(ThreeInRow(rposn) = TRUE) &amp; turn : Player &amp; bposn &lt;: 0..8</formula>
            <isNegative>true</isNegative>
            <state-variables>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>blue</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>{-}</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>{-}</value>
                    </values>
                </variable>
            </state-variables>
            <operation-parameters/>
            <expected-state-values>
                <variable>
                    <identifier>turn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
                <variable>
                    <identifier>bposn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
                <variable>
                    <identifier>rposn</identifier>
                    <values>
                        <value>unknown</value>
                    </values>
                </variable>
            </expected-state-values>
            <return-variables>
                <variable>
                    <identifier>result</identifier>
                </variable>
            </return-variables>
        </test-case>
    </test-cases>
</test-suite>
